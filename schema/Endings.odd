<?xml version="1.0" encoding="UTF-8"?><?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:gcse="http://www.google.com/cse"
   xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xh="http://www.w3.org/1999/xhtml">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Schema for content directly authored in HTML in the <title level="m">Endings
                  Project</title></title>
            <author>Martin Holmes</author>
         </titleStmt>
         <publicationStmt>
            <p>Free for any purpose</p>
         </publicationStmt>
         <sourceDesc>
            <p>Created to provide a simplified, constrained RNG and Schematron schema for authoring
               and editing the article pages in Oxygen, along with documentation.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <front xml:id="frontMatter">
         <titlePage>
            <docTitle>
               <titlePart type="main">Endings Project Schema/Documentation</titlePart>
               <titlePart type="sub">Manual for authors and editors of direct-to-HTML website
                  content</titlePart>
            </docTitle>
            <docAuthor>Martin Holmes</docAuthor>
            <docDate>2023</docDate>
         </titlePage>
         <p>This collection of pages provides documentation and encoding examples for the authors
            and editors of the front-end HTML pages for the Endings Project (endings.uvic.ca).</p>
         <divGen type="toc"/>
      </front>
      <body>
         <div xml:id="intro">
            <head>Introduction</head>
            <p>The Endings project site has a slightly embarrassing history. It began as a WordPress
               site hurriedly set up by a project RA right at the beginning of the project, then
               migrated to a GitHub.io build using Markdown and Jekyll. In 2022 Martin Holmes
               staticized the Jekyll site in a rough-and-ready way, but it was not until the end of
               the project that he had the time to do a thorough rebuild according to Endings
               Principles. However, we should now be able to maintain it in a conventional
               Endings-style manner, by editing content files, building a new edition of the site,
               and pushing it to the host server.</p>
         </div>

         <div xml:id="gettingStarted">
            <head>Getting started with encoding</head>

            <p>The project is hosted in a GitHub repository which you can clone as follows:</p>

            <eg>git clone git@github.com:projectEndings/Endings.git</eg>

            <p>Project members have write privileges on the repository.</p>

         </div>

         <div xml:id="oxygen_ms">
            <head>Working with Oxygen to encode content</head>
            <p>Your encoding work will all be done in the Oxygen XML Editor. Here's how to get
               started:</p>
            <list rend="numbered">
               <item>Open the Oxygen XML Editor.</item>
               <item>Click on Project / Open Project...</item>
               <item>Navigate to the <code>Endings</code> folder in the directory where you cloned
                  the repository.</item>
               <item>Choose the file <code>endings.xpr</code>.</item>
            </list>
            <p>You should see a tree of folders and files down the left of your Oxygen editor. This
               includes all the files in the project. You can ignore most of them. The folder that
               matters is the <code>pages</code> folder, where all the content for pages is
               kept.</p>
            <div xml:id="oxygenCodeTemplates_ms">
               <head>Oxygen code templates for editing: helpful shortcuts</head>
               <p>Our Oxygen project file has a number of useful keyboard shortcuts built into it,
                  which you can use to speed up your encoding. Generally speaking, to use these, you
                  select some text in the editor, then press the keystroke shortcut shown in the
                  table below. The table uses the following key names:</p>
               <table xml:id="keystrokesTable_ms">
                  <row>
                     <cell role="label">M1</cell>
                     <cell role="data">represents the Command key on MacOS X, and the Ctrl key on
                        other platforms.</cell>
                  </row>
                  <row>
                     <cell role="label">M2</cell>
                     <cell role="data">represents the Shift key.</cell>
                  </row>
                  <row>
                     <cell role="label">M3</cell>
                     <cell role="data">represents the Option key on MacOS X, and the Alt key on
                        other platforms.</cell>
                  </row>
                  <row>
                     <cell role="label">M4</cell>
                     <cell role="data">represents the Ctrl key on MacOS X, and is undefined on other
                        platforms.</cell>
                  </row>
               </table>
               <p>The following table shows keyboard shortcuts available when the
                     <code>endings.xpr</code> project file is loaded.</p>
               <table xml:id="codeTemplatesTable">
                  <row role="label">
                     <cell>Name</cell>
                     <cell>Description</cell>
                     <cell>Result</cell>
                     <cell>Keystroke</cell>
                  </row>
                  
               </table>
            </div>
         </div>

         <div xml:id="encodingPageContent">
            <head>Encoding page content</head>
            <p>Each page on the website is represented by a file in the <code>pages</code> folder; so 
            <code>outputs.xml</code> is the file from which the <code>outputs.html</code> file will 
            be created. Each document is an XHTML5 document whose root element is the <gi>body</gi>
            tag; the <gi>body</gi> tag should also have an <att>id</att> attribute which is identical
            to its filename minus the <code>.xml</code> extension. The contents of the <gi>main</gi>
            element will be used when generating the output page.</p>
            
            <p>A schema (documented and defined in the <code>schema/Endings.odd</code> file, from 
            which this documentation is generated) controls what is allowed in the content. In 
            principle, it would be fine to use any HTML that is necessary, but in practice we like 
            to impose a much more restrictive schema on our content documents so that our site is 
            consistently formatted and laid out. If you find the need for an element or attribute 
            which is not allowed by the current schema, either add it to the ODD file and regenerate
            the schema, or contact <ref target="mailto:mholmes@uvic.ca">mholmes@uvic.ca</ref>, who 
            will do it for you.</p>

            <p>For more details on the encoding patterns and rules used in article content, see <ref
                  target="#commonStructures">Common elements and attributes</ref>.</p>

         </div>


         <div xml:id="commonStructures">
            <head>Common elements and attributes</head>

            <p>TODO...</p>


            <div xml:id="encodingMisc">

               <head>Miscellaneous encoding practices</head>

               <p>Emphasis is encoded using the <gi>em</gi> element: <egXML
                     xmlns="http://www.tei-c.org/ns/Examples"> This is <em>exactly</em> what he
                     means. </egXML>
               </p>

               <p>Foreign words and phrases are tagged when they need to be presented in italics:
                     <egXML xmlns="http://www.tei-c.org/ns/Examples"> ...the swarm of his
                     many-coloured fancies was again made grey by the <span data-nametype="foreign"
                        >atra cura</span> of unsuccessful toils. </egXML>
               </p>

               <p>Ellipses (three dots) are always transcribed using the single Unicode ellipsis
                  character (…), which you can input using the keystroke combination Control + Shift
                  + period. This will be converted to an MLA-friendly non-wrapping sequence of
                  periods and non-breaking spaces in the output.</p>

            </div>

         </div>

         <div xml:id="forProgrammers">
            <head>For programmers</head>
            <p>The Endings website is a simple digital edition project based on a highly-constrained XHTML5
               encoding. When working on this project, always open the <ident>endings.xpr</ident>
               Oxygen project, which provides all the transformation scenarios and other tools
               required. <list>
                  <item>Content consists of XML documents and images, and lives inside the
                        <ident>content</ident> subfolder. The XML documents are simply XHTML5 rooted
                     on the <gi>body</gi> element.</item>
                  <item>The documentation you are reading now is generated from the ODD file (see
                     below), and consists of encoding instructions and project details, along with
                     full schema documentation. It lives in the <ident>documentation</ident>
                     subfolder.</item>
                  <item>The <ident>utilities</ident> folder contains Java tools such as Saxon and Jing
                     which are required for building the schema and the site.</item>
                  <item>The <ident>site_templates</ident> folder contains the template from which 
                  all the pages will be generated at build time.</item>
                  <item>The <ident>schema</ident> folder contains the <ident>Endings.odd</ident> file
                     which is the source for the schema and its documentation, as well as the
                        <ident>Endings.rng</ident> and <ident>Endings.sch</ident> schemas generated from
                     it. To regenerate the schemas, open the ODD file in Oxygen and press the red
                     triangle. This process uses the <ident>buildSchema.xml</ident> ant build file
                     in the project root.</item>
                  <item>The <ident>utilities</ident> folder contains Schematron tools, as well as
                     the XSLT file produced from the project Schematron rules, and used to validate
                     documents during the build process. Other components are also stored
                     here.</item>
                  <item>The <ident>xsl</ident> folder contains all the XSLT used in the build
                     processes.</item>
               </list>
            </p>

         </div>

         <div xml:id="gettingHelp">
            <head>Getting help</head>
            <p>If you need technical help with any aspect of this project/website, contact Martin
               Holmes <ref target="mailto:mholmes@uvic.ca">mholmes@uvic.ca</ref>.</p>
         </div>
      </body>
      <back>
         <div>
            <!-- We allow multiple starting elements for our schema so that we can 
                validate articles and page-component fragments in their own 
                discrete files, while also validating full pages created from them. -->
            <schemaSpec ident="endingsHtml" prefix="xh_" start="article main"
               ns="http://www.w3.org/1999/xhtml">
               <moduleRef key="tei"/>
               <moduleSpec ident="endingsHtml">
                  <desc>Base schema module for all endingsHtml elements defined in this ODD.</desc>
               </moduleSpec>

               <elementSpec ident="main" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>The main element, containing block content</gloss>
                  <desc>This is used as the root element only in pages which aren't articles, such
                     as generated listings pages. Articles are compiled in pairs under a main
                     element.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <elementRef key="div"/>
                           <elementRef key="dialog"/>
                           <elementRef key="article" maxOccurs="2"/>
                        </alternate>
                        <!-- We allow script here for staticSearch overrides. -->
                        <elementRef key="script" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>

               <elementSpec ident="article" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>The principal container element, containing block content</gloss>
                  <desc>This is the main root element for our article documents.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <macroRef key="macro.endingsBlockContent"/>
                           <elementRef key="section" minOccurs="1" maxOccurs="unbounded"/>
                        </alternate>
                     </sequence>
                  </content>
                  <attList>
                     <attDef ident="data-shortname">
                        <gloss>This is a simplified name of the poet used in the case of very long
                           poet names.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>

               <elementSpec ident="section" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>A subsection of a page</gloss>
                  <desc>If using sections, there must be at least two.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" maxOccurs="1"/>
                        <macroRef key="macro.endingsBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>

               <elementSpec ident="div" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>A division of the footer element or the search page.</gloss>
                  <desc>The div may be the main child of the main element.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" minOccurs="0" maxOccurs="1"/>
                        <alternate minOccurs="1" maxOccurs="1">
                           <elementRef key="p"/>
                           <elementRef key="div"/>
                           <macroRef key="macro.endingsBlockContent"/>
                        </alternate>
                     </sequence>

                  </content>
               </elementSpec>

               <elementSpec ident="h2" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>Main page heading</gloss>
                  <desc>The h2 (level 2 heading) element provides the heading for article
                     content.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
                  <constraintSpec ident="modernArticleMustHaveAuthor" scheme="schematron">
                     <constraint>
                        <sch:rule
                           context="xh:article[starts-with(@id, 'mod_')][count(descendant::xh:p) gt 1]/xh:h2">
                           <sch:assert test="descendant::xh:a[@href][@data-nametype='persName']">
                              The heading for a modern article must contain a link to the name of
                              its author. </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <elementSpec ident="h3" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>Section heading</gloss>
                  <desc>The h3 (level 3 heading) element provides the heading for sections (if any)
                     inside the main element.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockHeading"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="p" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Prose paragraph.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="details" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Expandable details element with summary child.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="summary"/>
                        <macroRef key="macro.endingsBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="summary" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Single-line summary for details element.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="blockquote" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Block quotation.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="ul"/>
                        <elementRef key="br"/>
                        <macroRef key="macro.endingsParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="q" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Inline quotation. In rendering, quotation marks will be supplied, so do not
                     include them.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="br"/>
                        <macroRef key="macro.endingsParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="ul" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Unordered list, usually bulleted.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <attList>
                     <attDef ident="class" mode="change">
                        <valList mode="add">
                           <valItem ident="referenceList">
                              <gloss>A reference list at the end of an article.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="ol" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Ordered list, usually numbered.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               <elementSpec ident="li" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Item in a list or a menu.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <elementRef key="ul"/>
                        <elementRef key="ol"/>
                        <elementRef key="p"/>
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="pre" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Preformatted text which is to be presented exactly as written in the HTML
                     file.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                  </classes>
                  <content>
                     <textNode/>
                  </content>
               </elementSpec>
               <elementSpec ident="span" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>General-purpose phrase-level element. Use only if there is no more specific
                     alternative for what you want.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasLang"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
                  <!-- NOTE: Leaving this in place, but we expect this to be 
                   changed or expanded. -->
                  <constraintSpec ident="spansMustHavenametypeStyleOrClass" scheme="schematron">
                     <constraint>
                        <sch:assert test="@class or @style or @data-nametype"> A span element must
                           have a class attribute, a data-nametype attribute, or a style attribute.
                        </sch:assert>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <elementSpec ident="strong" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>Strong text</gloss>
                  <desc>Text that needs to be highlighted because it is important; will be rendered
                     by default in bold.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="code" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <gloss>Inline computer code, filenames etc.</gloss>
                  <desc>Inline text which is computer code or similar text such as
                     identifiers.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="img" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Image element. May be rendered inline or as a block, depending on where it
                     appears in the document structure.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <constraintSpec ident="imgWithoutCaptionNeedsAlt" scheme="schematron">
                     <constraint>
                        <!--<sch:ns uri="http://www.w3.org/1999/xhtml" prefix="xh"/>-->
                        <sch:assert
                           test="@alt or following-sibling::xh:figcaption or ancestor::xh:ul[@class='gallery']"
                           > If your img element is not inside a figure element with a figcaption,
                           then it requires the @alt attribute to provide help for visually-impaired
                           users. </sch:assert>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="width" usage="opt">
                        <desc>Width in pixels of the image.</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                     <attDef ident="height" usage="opt">
                        <desc>Height in pixels of the image</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                     <attDef ident="src" usage="req">
                        <gloss>path to the image (usually a relative path)</gloss>
                        <datatype>
                           <dataRef key="teidata.pointer"/>
                        </datatype>
                     </attDef>
                     <attDef ident="alt" usage="opt">
                        <gloss>description of the image for visually-impaired users. If not
                           supplied, then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="title" usage="opt">
                        <gloss>description of the image which will pop up on mouseover. If not
                           supplied, then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="em" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Emphasized text; will be rendered by default in italics.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="u" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Underlined text, in a context where we do not wish to conjecture why the
                     underline is there (in an original article, or a quotation of an external
                     source).</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.endingsParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="a" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasHref"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <gloss>explanation of what is being linked to. Will pop up when mousing over
                           the link.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="target" usage="opt">
                        <valList type="closed">
                           <valItem ident="_blank">
                              <gloss>Open this link in a new window or tab.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="dialog" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>An HTML dialog element</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="figure"/>
                        <elementRef key="div"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="cite" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>An HTML cite element</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>

               <elementSpec ident="figure" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A figure consists of an image and a caption.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="img"/>
                        <elementRef key="figcaption" minOccurs="0"/>
                     </sequence>
                  </content>
                  <attList>
                     <attDef ident="class" mode="change" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="leftFloat">
                              <gloss>Float this figure to the left and flow the text around
                                 it.</gloss>
                           </valItem>
                           <valItem ident="center">
                              <gloss>Centre this figure and do not float text around it.</gloss>
                           </valItem>
                           <valItem ident="rightFloat">
                              <gloss>Float this figure to the right and flow the text around
                                 it.</gloss>
                           </valItem>
                           <valItem ident="lightbox-figure">
                              <gloss>Used for a figure which appears in the ad gallery.</gloss>
                           </valItem>
                        </valList>
                     </attDef>

                  </attList>
               </elementSpec>
               <elementSpec ident="br" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A hard-coded linebreak. Avoid unless you absolutely need it. Use it at the
                     end of lines in poems.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <empty/>
                  </content>
               </elementSpec>
               <elementSpec ident="figcaption" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>Caption for an image in a figure element.</desc>
                  <classes>
                     <memberOf key="model.endingsPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="td" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A table data cell.</desc>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="button" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>An HTML button element.</desc>
                  <classes>
                     <memberOf key="model.endingsBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="th" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A table label or heading cell.</desc>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="scope" usage="opt">
                        <valList type="closed">
                           <valItem ident="col">
                              <gloss>Scope of this heading is the column below it.</gloss>
                           </valItem>
                           <valItem ident="row">
                              <gloss>Scope of this heading is the row to the right of it.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="tr" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A table row.</desc>
                  <content>
                     <sequence minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="th" minOccurs="0" maxOccurs="unbounded"/>
                        <elementRef key="td" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="caption" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A table caption.</desc>
                  <content>
                     <macroRef key="macro.endingsParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="table" ns="http://www.w3.org/1999/xhtml" module="endingsHtml">
                  <desc>A table.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="model.endingsBlockBody"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="caption" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="tr" minOccurs="1" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <macroSpec ident="macro.endingsParaContent" module="endingsHtml">
                  <desc>Content model for paragraph-type containers such as paragraphs, list items,
                     and so on.</desc>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <textNode/>
                        <classRef key="model.endingsPhrase"/>
                     </alternate>
                  </content>
               </macroSpec>
               <macroSpec ident="macro.endingsBlockContent" module="endingsHtml">
                  <desc>Content model for div container.</desc>
                  <content>
                     <sequence>
                        <classRef key="model.endingsBlockHeading" minOccurs="0" maxOccurs="unbounded"/>
                        <classRef key="model.endingsBlockBody" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </macroSpec>
               <classSpec type="model" ident="model.endingsPhrase" module="endingsHtml">
                  <desc>Groups elements which can appear at the phrase level.</desc>
               </classSpec>
               <classSpec type="model" ident="model.endingsBlockBody" module="endingsHtml">
                  <desc>Groups elements which can appear below the heading in an article or
                     section.</desc>
               </classSpec>

               <classSpec ident="att.hasLang" type="atts" module="endingsHtml">
                  <desc>Groups elements which may have a language attribute.</desc>
                  <attList>
                     <attDef ident="lang" usage="opt">
                        <gloss>Specifies the language of the content of the element.</gloss>
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.word"/>
                        </datatype>
                        <valList type="semi">
                           <valItem ident="en">
                              <gloss>English</gloss>
                           </valItem>
                           <valItem ident="fr">
                              <gloss>French</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>

               <classSpec type="atts" ident="att.classable" module="endingsHtml">
                  <desc>Groups elements which can have a class attribute.</desc>
                  <attList>
                     <attDef ident="class" usage="opt">
                        <gloss>The class attribute provides styles through rules in the CSS
                           stylesheet. </gloss>
                        <datatype maxOccurs="unbounded">
                           <dataRef key="teidata.word"/>
                        </datatype>
                     </attDef>
                     <attDef ident="style" usage="opt">
                        <gloss>The style attribute provides one-off style options for specific and
                           unusual cases. Do not use this unless you know that the element you're
                           styling is unlike any other element on the site.</gloss>
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.identifiable" module="endingsHtml">
                  <desc>Groups elements which may have an id attribute.</desc>
                  <attList>
                     <attDef ident="id" usage="opt">
                        <datatype>
                           <dataRef name="ID"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.hasnametype" module="endingsHtml">
                  <gloss>Groups elements which have the @data-nametype attribute.</gloss>
                  <attList>
                     <attDef ident="data-nametype" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="monographTitle">
                              <gloss>Book or play title (will be italicized)</gloss>
                           </valItem>
                           <valItem ident="periodicalTitle">
                              <gloss>Title of newspaper, magazine, or journal (will be
                                 italicized)</gloss>
                           </valItem>
                           <valItem ident="periodicalTitle">
                              <gloss>Periodical title (will be italicized)</gloss>
                           </valItem>
                           <valItem ident="poemTitle">
                              <gloss>Poem title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="songTitle">
                              <gloss>Song title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="italicPoemTitle">
                              <gloss>Poem title as presented in Endings (in italics rather than
                                 quotes)</gloss>
                           </valItem>
                           <valItem ident="italicEssayTitle">
                              <gloss>Essay or article title as presented in Endings (in italics rather
                                 than quotes)</gloss>
                           </valItem>
                           <valItem ident="italicSongTitle">
                              <gloss>Song title as presented in Endings (in italics rather than
                                 quotes)</gloss>
                           </valItem>
                           <valItem ident="articleTitle">
                              <gloss>Article title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="foreign">
                              <gloss>Text in a foreign language (will be italicized)</gloss>
                           </valItem>
                           <valItem ident="persName">
                              <gloss>The name of a person</gloss>
                           </valItem>
                           <valItem ident="surname">
                              <gloss>The surname of a person, usually inside a persName.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.formatted" module="endingsHtml">
                  <gloss>Groups elements which have the ... TODO...</gloss>
               </classSpec>

               <classSpec type="atts" ident="att.hasHref" module="endingsHtml">
                  <gloss>Groups elements which have the <att>href</att> attribute.</gloss>
                  <attList>
                     <attDef ident="href" usage="req">
                        <datatype>
                           <dataRef key="teidata.pointer"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>

               <classSpec type="atts" ident="att.hasTitle" module="endingsHtml">
                  <gloss>Groups elements which have the <att>title</att> attribute.</gloss>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>

               <classSpec type="atts" ident="att.hasTabindex" module="endingsHtml">
                  <gloss>Groups elements which have the <att>tabindex</att> attribute.</gloss>
                  <attList>
                     <attDef ident="tabindex" usage="opt">
                        <datatype>
                           <dataRef key="nonNegativeInteger"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>

               <!--        Global Schematron constraints    -->
               <constraintSpec ident="schVariables" scheme="schematron">
                  <constraint>
                     <sch:ns uri="http://www.w3.org/1999/xhtml" prefix="xh"/>
                     <sch:pattern>
                        <sch:let name="smartDouble" value="'[“”]'"/>
                        <sch:let name="smartSingle" value="'[‘’]'"/>
                        <sch:let name="straightDouble" value="'&#34;'"/>
                        <sch:let name="straightApos" value="''''"/>
                        <sch:let name="straightQuotes"
                           value="concat('[', $straightDouble, $straightApos, ']')"/>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noQuotesInText" scheme="schematron">
                  <constraint>
                     <sch:rule
                        context="xh:*[text()][not(ancestor-or-self::xh:script or ancestor-or-self::xh:style or ancestor-or-self::xh:code or ancestor-or-self::xh:pre)]">
                        <sch:assert test="not(text()[matches(., $straightQuotes)])"> Do not use
                           straight quotes in text. Use the q or span elements wherever possible;
                           for apostrophes, use the smart version (’). </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="onlyPermittedImgAttributes" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:img">
                        <sch:assert
                           test="every $att in @* satisfies local-name($att) = ('src', 'alt', 'title', 'width', 'height', 'id', 'style', 'class')"
                           > Only the following attributes are allowed on img: 'src', 'alt',
                           'title', 'id', 'style', 'class', 'width' and 'height'. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noBadImageFilenames" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:img">
                        <sch:assert test="matches(@src, '^[a-zA-Z0-9/\._\-]+$')"> Image file paths
                           must be well-formed (no spaces or punctuation). </sch:assert>
                        <sch:assert
                           test="matches(@src, '^(images/)|(neighbourhoodMaps/)|(gallery/)')"> Image
                           file paths must begin with images/, neighbourhoodMaps/, or gallery/. </sch:assert>
                        <sch:assert
                           test="not(@data-lg-version) or matches(@data-lg-version, '^(images/)|(neighbourhoodMaps/)|(gallery/)')"
                           > Image file paths must begin with images/, neighbourhoodMaps/, or
                           gallery/. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="spacesAfterPeriods" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '[^\.A-Z]\.[A-Z]')])"> Don't forget
                           to put a space after every period. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noSpacedPeriodEllipses" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\s*\.\s*\.')])"> Don't use
                           literal periods to create an ellipsis. Use the ellipsis character (…,
                           Control + Shift + period) instead. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noSpacesInHrefs" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(matches(@href, '\s+'))"> There should be no spaces in
                           href attributes (links). </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noLinksInH3s" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:h3">
                        <sch:assert test="not(xh:a[@href])"> Don't place links inside h3 elements.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noLinksInLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(descendant::xh:a[@href])"> Don't place links inside
                           other links. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="periodsAndCommasOutsideLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a[@href]">
                        <sch:assert
                           test="not(matches(., '[\.,:;]\s*$')) or matches(., '((Esq\.)|(A\.\s*W\.)|(\.\s*\.\s*\.))$')"
                           > Don't include trailing periods and commas inside link text.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <!-- Excessive style constraint? -->
               <constraintSpec ident="useProperEllipsis" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\.\.')])"> Use an ellipsis (…)
                           rather than three periods. </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>

               <constraintSpec ident="endings-idShouldMatchFilename" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:article">
                        <sch:let name="fname" value="concat(@id, '.xml')"/>
                        <sch:assert test="ends-with(document-uri(/), $fname)"> ERROR: The @id of
                           your document (<sch:value-of select="@id"/>) does not match the document
                           file name (<sch:value-of select="document-uri(/)"/>). </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </schemaSpec>
         </div>
      </back>
   </text>
</TEI>
